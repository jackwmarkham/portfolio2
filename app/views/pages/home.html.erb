<div class="wrapper">
    <div class="jumbotron text-center">
        <div class="jumbotext">
            <h1 style="color: white; font-size: 6vw;">Jack<br><br>Markham</h1>
            <h2 style="font-size: 3vw;"><br>Front-End Web Development</h2>
            <h2 style="animation-duration: 1s; animation-name: flash; animation-iteration-count: infinite; animation-direction: alternate; font-size: 2vw;"><br><br>Continue</h2>

            <a class="smoothScroll" href="#bottom"><img src="https://upload.wikimedia.org/wikipedia/commons/1/17/8bit_arrow_down.png"></a>
        </div>
    </div>
    <canvas class="c1"></canvas>
    <div class="reflection-wrapper">
        <canvas class="c2"></canvas>
    </div>
</div>
<a class="smoothScroll" id="bottom"></a>
<div class="container">
    <div class="row row-centered lvl2" style="padding 10px; margin-top: 130px;">
        <div class="col-sm-6" style="padding: 10px;">
            <%= image_tag "rhodium-arene.jpg", :class => "projectimage" %>
        </div>
        <div class="col-sm-6 col-centered" style="display: table-cell;
    vertical-align: middle;">
            <h3>Rhodium-*Cp Complexes for Delivery of Anti-Cancer Agents
            </h3>
            <p>
                This publication was written as the culmination of my research during my B. Sci (Hon 1), completed at the University of Sydney under the supervision of Prof. Peter A. Lay. The focus of the project was the investigation of metal complexes with a
                common Rh(III)-Pentamethylcyclopmentadiene (*Cp) motif. <br><br><br> Unfortunately, I did not single-handedly cure cancer in that year, but I learned that it's just as important to map out the dead ends, even if it's a little less glamorous. <br><br><br>The paper was
                published in the European Journal of Inorganic Chemistry (EJIC) and can be found <a href="http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1099-0682c">here.</a>
            </p>
        </div>
    </div>
    <div class="row row-centered lvl2" style="padding 10px;">
        <div class="col-sm-6" style="padding: 10px;">
            <%= image_tag "alarm-clock.jpg", :class => "projectimage" %>
        </div>
        <div class="col-sm-6 col-centered">
            <h3>alarm-clock.rb</h3>
            <p>
              This is a relatively simple alarm clock application that I wrote as a project when I was still learning Ruby. It allows the user to set a different alarm time for each day, to choose from three different alarm tones and to display a todo list when the alarm is activated. <br><br><br> I also integrated weather reports and multiple methods by which to deactivate the alarm, including by doing simple sums or by returning a string of randomly generated text. While not exactly production quality (who really needs a command line alarm?), this project was a great learning experience when I was still coming to grips with the basics of coding. <br><br><br>This app is currently being used as a teaching resource for future classes at CoderFactory Academy and is available on my <a href="https://github.com/jackwmarkham/alarm_clock">GitHub.</a>
            </p>
        </div>
    </div>
    <div class="row row-centered lvl2" style="padding 10px;">
        <div class="col-sm-6" style="padding: 10px;">
            <img src="https://pbs.twimg.com/media/BNp5b9xCAAA_cJe.jpg" alt="To Pimp a Seinfeld" style="max-width:100%; max-height:100%;">
        </div>
        <div class="col-sm-6 col-centered">
            <h3>Project A</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
        </div>
    </div>
</div>
<!-- Smooth scroll script -->
<script>
    $(function () {
        // This will select everything with the class smoothScroll This should prevent problems with carousel, scrollspy, etc...
        $('.smoothScroll').click(function () {
            if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
                var target = $(this.hash);
                target = target.length
                    ? target
                    : $('[name=' + this.hash.slice(1) + ']');
                if (target.length) {
                    $('html,body').animate({
                        scrollTop: target.offset().top
                    }, 1000); // The number here represents the speed of the scroll in milliseconds
                    return false;
                }
            }
        });
    });
</script>

<!--Particle rain script-->
<script>
    var gui = new dat.GUI(),
        canvas = document.querySelector("canvas"),
        canvas_m = document.querySelector(".c2"),
        ctx = canvas.getContext("2d"),
        ctx_m = canvas_m.getContext("2d"),
        width = 0,
        height = 0,
        particles = [],
        particles = [],
        particlePool = null,
        config = {
            minDropSize: 3,
            maxDropSize: 5,
            windForce: 10,
            particlesPerSplash: 3,
            dropsPerInterval: 10,
            dropInterval: 100,
            numParticles: 1000
        };

    // gui.add(config, 'minDropSize', 0, 10); gui.add(config, 'maxDropSize', 0, 10); gui.add(config, 'windForce', -100, 100); gui.add(config, 'particlesPerSplash', 0, 10).step(1); gui.add(config, 'dropsPerInterval', 0, 10).step(1); gui.add(config,
    // 'dropInterval', 0, 100); gui.add(config, 'numParticles', 0, 10000);

    var Context = function (ctxs) {
        this.contexts = ctxs;
        this.fillStyle = "#FFF";
    };

    Context.prototype.proxy = function (f, args) {

        var _this = this;

        this.contexts.forEach(function (ctx, i, array) {

            if (_this.fillStyle) {
                ctx.fillStyle = _this.fillStyle;
            }

            ctx[f].bind(ctx).apply(ctx, args);
        });
    };

    Context.prototype.clearRect = function (x, y, w, h) {
        this.proxy("clearRect", arguments);
    }

    Context.prototype.fillRect = function (x, y, w, h) {
        this.proxy("fillRect", arguments);
    }

    var contexts = new Context([ctx, ctx_m]);

    var resize = (function (event) {
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;

        canvas_m.width = width;
        canvas_m.height = height;

    })();

    window.addEventListener("resize", resize);

    // Vector
    var Vector = function (x, y) {
        this.x = x;
        this.y = y;
    }

    // Particle
    var Particle = function (x, y, size, velocity) {
        this.x = x;
        this.y = y;
        this.size = size || 5;
        this.id = ++Particle.id;
        this.velocity = velocity || new Vector(0, 0);
    };

    Particle.id = 0;

    Particle.prototype.render = function (ctx) {
        ctx.fillStyle = "rgba(128,255,255,.8)";
        ctx.fillRect(this.x, this.y, this.size, this.size);

        return this;
    }

    Particle.prototype.splash = function (n) {
        times(n, function (i) {

            var p = particlePool.getParticle(false);

            if (p) {

                p.velocity.x = Math.randomRange(-100, 100);
                p.velocity.y = Math.randomRange(-4, -1);
                p.x = this.x;
                p.y = height - 1;
                p.size = this.size / 2;
                p.splashing = true;
                particles.push(p);

            }

        }, this);
    }

    Particle.prototype.reset = function () {
        this.velocity.x = this.velocity.y = 0;
        this.x = Math.randomRange(-300, width + 0);
        this.y = -100;
        this.size = Math.randomRange(config.minDropSize, config.maxDropSize);
        this.splashing = false;

        return this;
    }

    Particle.prototype.isOutOfBounds = function () {
        return (this.x > width + 0 || this.x < -300 || this.y > height);
    }

    Particle.prototype.update = function (dt) {
        var g = (dt / 1000) * 9.8 * (this.size / 2);

        this.velocity.y += g;
        this.velocity.x = config.windForce * g;

        this.y += this.velocity.y;
        this.x += this.velocity.x;

        return this;
    }

    // Particle Pool
    var Pool = function (amount) {
        this.particles = [];
        while (amount--)
            this.storeParticle(this.createParticle());
        }

    Pool.prototype.getParticle = function (createNewIfNeeded) {

        var createNew = createNewIfNeeded || false;

        if (this.particles.length) {
            return this.particles.pop().reset();
        } else if (createNew || (this.particles.length + particles.length < config.numParticles)) {
            return this.createParticle().reset();
        } else
            return false;
        }

    Pool.prototype.storeParticle = function (p) {
        this.particles.push(p);
        return p;
    }

    Pool.prototype.createParticle = function () {
        var p = new Particle(0, 0);
        return p;
    }

    Pool.prototype.isAvailable = function () {
        return (this.particles.length || this.increase);
    }

    particlePool = new Pool(config.numParticles, false);

    var delta = 0,
        old_t = 0,
        new_t = 0;

    var num_particles = config.numParticles;

    var dropTimer = 0;

    var update = function (time) {

        contexts.clearRect(0, 0, canvas.width, canvas.height);

        new_t = time;

        old_t
            ? delta = new_t - old_t
            : delta = new_t;

        dropTimer += delta;
        if (dropTimer >= config.dropInterval) {
            dropTimer = 0;
            times(config.dropsPerInterval, function () {

                if (particlePool.isAvailable())
                    particles.push(particlePool.getParticle());

                }
            );
        }

        particles.forEach(function (particle, i, array) {
            particle.update(delta);
            particle.render(contexts);

            if (particle.isOutOfBounds()) {
                if (!particle.splashing)
                    particle.splash(config.particlesPerSplash);
                particlePool.storeParticle(particle);
                array.splice(i, 1);
            }
        });

        ctx.fillStyle = "rgba(0, 0, 0, 0)";
        ctx.font = "12px Arial";
        ctx.fillText("number of particles left in pool: " + particlePool.particles.length, 10, 50);

        ctx.fillText("total number of particles: " + particles.length + particlePool.particles.length, 10, 80);

        ctx.fillText("active particles: " + particles.length, 10, 110);

        window.requestAnimationFrame(update);

        old_t = new_t;
    }

    var times = function (n, f, c) {
        if (!c) {
            c = this;
        }
        while (n--)
            f.call(c, n);
        }

    Math.randomRange = function (min, max) {
        return Math.random() * (max - min) + min;
    }

    window.requestAnimationFrame(update);
</script>
